@startuml Classes

skinparam linetype polyline
skinparam linetype ortho

class Cell <<entity>>{
    - visible : bool
    - value : char

    - posX : int
    - posY : int

    + Cell()
    + ~Cell()

    + isVisible() : bool
    + getValue() : char
    + getPosX () : int
    + getPosY () : int
    + setVisible(visible : bool) : void
    + setValue(value : char) : void
    + setPos(posX : int, posY : int) : void
    + draw() : void
}

class BoardBuilder <<control>> {
    - board : Board*
    - auxPos[2] : int

    + BoardBuilder()
    + ~BoardBuilder()
    + reset() : void
    + setCruiser(q : int) : void
    + setSubmarine(q : int) : void
    + setDestroyer(q : int) : void
    + setBattleship(q : int) : void
    + setCarrier(q: int) : void
    + setIsles(q : int) : void

    + randPosition(pos : int*) : int* 
    + isBoundary(posX : int, posY : int) : bool
    + checkEmptyCells(q : int, posX : int, posY : int, direction : int) : bool
    + getResult() : Board*
}

enum CardinalDirections <<enumeration>>{
    NORTH = 0
    SOUTH
    WEST
    EAST
}
hide CardinalDirections methods
note left
    This is an <i>enum class</i>
end note
class Board <<entity>>{
    - board : std::vector<std::vector<Cell*>>
    - ships : std::vector<Ship*>
    - isles : std::vector<Cell*>
    - size : int

    + Board()
    + ~Board()

    + getBoard() : std::vector<std::vector<Cell*>>
    + getSize() : int
    + setBoard(board : std::vector<std::vector<Cell*>>) : void
    + setSize(size : int) : void

    + draw() : void
}

class Ship <<entity>>{
    - size : int
    - parts : std::vector<Cell*>
    - type : char
    - orientation : bool

    + Ship()
    + ~Ship()

    + getSize() : int
    + getParts() : std::vector<Cell*>
    + getType() : char
    + getOrientation() : bool
    + setSize(size : int) : void
    + setParts(parts : std::vector<Cell*>) : void
    + setType(type : char) : void
    + setOrientation(orientation : bool) : void

}

class Cruiser <<entity>> extends Ship{
    + Cruiser()
    + ~Cruiser()

}

class Submarine <<entity>> extends Ship{
    + Submarine()
    + ~Submarine()
    
}


class Destroyer <<entity>> extends Ship{
    + Destroyer()
    + ~Destroyer()
    
}

class Battleship <<entity>> extends Ship{
    + Battleship()
    + ~Battleship()
   
}

class Carrier <<entity>> extends Ship{
    + Carrier()
    + ~Carrier()
    
}

class Player <<entity>>{
    - name : std::string
    - points : int
    - board : Board*

    + Player()
    + ~Player()

    + getName() : std::string
    + getPoints() : int
    + getBoard() : Board*
    + setName(name : std::string) : void
    + setPoints(points : int) : void
    + setBoard(board : Board*) : void
    + {abstract} getNextShoot() : virtual int*
    + {abstract} shoot(pos : int*) : virtual bool
}

class AI <<entity>> extends Player{
    - nextShoot[2] : int

    + AI()
    + ~AI()

    + randomShoot() : void
    + getNextShoot() : int*
    + setNextShoot(nextShoot[2] : int) : void
    + shoot(pos : int*) : bool
}

class Human <<entity>> extends Player{
    + Human()
    + ~Human()

    + getInput() : std::String
    + isInputValid() : bool
    + getNextShoot() : int*
    + shoot(pos : int*) : bool
}

class Game <<control>>{
    - player1 : Player*
    - player2 : Player*
    - currentState : int
    --
    + Game()
    + ~Game()
    .. Game modes ..
    + setSingleplayer() : void
    + setMultiplayer() : void
    .. Game states ..
    + MainMenu() : void
    + GameLoop() : void
    + GameOver() : void
    + Ranking() : void
    + changeState(newState : int) : void
    .. Board types ..
    + createDefaultBoard() : void
    + createIslesBoard() : void
    + createSingleShipBoard() : void
    ..
    + init() : void
    + saveGame() : void
    + loadGame() : void
}

enum States <<enumeration>>{
    MainMenu = 0
    GameOver
    Ranking
}
hide States methods
note right
    This is an <i>enum class</i>
end note

class GameSaver <<interface>>{
    .. Save ..
    + saveGame() : void
    + saveCell() : void
    + saveBoard() : void
    + saveShip() : void
    + savePlayer() : void
    + saveRanking() : void
    .. Load ..
    + loadGame() : void
    + loadCell() : void
    + loadBoard() : void
    + loadShip() : void
    + loadPlayer() : void
    + loadRanking() : void
}
class UI <<Interface>> {
    + UI()
    + ~UI()

    + {static} draw() : static void
    + {static} clear() : static void
    + drawTopUI() : void
    + drawBottomUI() : void
    + drawMainMenu() : void
    + drawRanking() : void
}


package "Data Access Layer" {
    class CellDAO <<interface>>{
        + CellDAO()
        + ~CellDAO()

        + {abstract} save() : virtual void
        + {abstract} load() : virtual void
    }

    class CellDAOTxt extends CellDAO{
        + CellDAOTxt()
        + ~CellDAOTxt()

        + save() : void
        + load() : void
    }

    class CellDAOBin extends CellDAO{
        + CellDAOBin()
        + ~CellDAOBin()

        + save() : void
        + load() : void
    }

    class BoardDAO <<interface>>{
        + BoardDAO()
        + ~BoardDAO()

        + {abstract} save() : virtual void
        + {abstract} load() : virtual void
    }

    class BoardDAOTxt extends BoardDAO{
        + BoardDAOTxt()
        + ~BoardDAOTxt()

        + save() : void
        + load() : void
    }

    class BoardDAOBin extends BoardDAO{
        + BoardDAOBin()
        + ~BoardDAOBin()
        
        + save() : void
        + load() : void
    }

    class ShipDAO <<interface>>{
        + ShipDAO()
        + ~ShipDAO()

        + {abstract} save() : virtual void
        + {abstract} load() : virtual void
    }

    class ShipDAOTxt extends ShipDAO{
        + ShipDAOTxt()
        + ~ShipDAOTxt()

        + save() : void
        + load() : void
    }

    class ShipDAOBin extends ShipDAO{
        + ShipDAOBin()
        + ~ShipDAOBin()

        + save() : void
        + load() : void
    }

    class PlayerDAO <<interface>>{
        + PlayerDAO()
        + ~PlayerDAO()

        + {abstract} save() : virtual void
        + {abstract} load() : virtual void
    }

    class PlayerDAOTxt extends PlayerDAO{
        + PlayerDAOTxt()
        + ~PlayerDAOTxt()
        + save() : void
        + load() : void
    }

    class PlayerDAOBin extends PlayerDAO{
        + PlayerDAOBin()
        + ~PlayerDAOBin()
        + save() : void
        + load() : void
    }

    class RankingDAO <<interface>>{
        + RankingDAO()
        + ~RankingDAO()

        + {abstract} save() : virtual void
        + {abstract} load() : virtual void
    }

    class RankingDAOTxt extends RankingDAO{
        + RankingDAOTxt()
        + ~RankingDAOTxt()
        
        + save() : void
        + load() : void
    }
}

Game "1" o-- "2" Player : > aggregates
Game "1" o-l- "1" UI : > aggregates
Game "1" -r-> "1" GameSaver : > knows
Game .. States

Player "1" o-- "1" Board : > aggregates

BoardBuilder "1" o-- "1" Board : > aggregates
BoardBuilder .. CardinalDirections
Board "1" *-- "many" Cell : > contains
Board "1" o-- "many" Ship : > aggregates

Ship "1" -r-> "many" Cell : > knows
UI "1" --> "2" Board : > knows
UI "1" --> "2" Player : > knows

GameSaver --> CellDAO
GameSaver --> BoardDAO
GameSaver --> ShipDAO
GameSaver --> PlayerDAO
GameSaver --> RankingDAO
@enduml